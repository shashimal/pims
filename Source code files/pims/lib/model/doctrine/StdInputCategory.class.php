<?php
/**
 * StdInputCategory
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    pims
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class StdInputCategory extends BaseStdInputCategory {

    /**
     * Show STD input category list
     * @param $orderField
     * @param $orderBy
     * @return objects of $stdCategory
     */

    public function showStdInputCategoryList() {

        try {

             $q = Doctrine_Query::create()
                    ->from('StdInputCategory');

             $stdCategories = $q->execute();

             return $stdCategories;

        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }
    }

    /**
     * Search a STD input category
     * @param $searchMode
     * @param $searchValue
     * @return object of $stdCategory
     */
    public function searchStdInputCategory($searchMode, $searchValue) {

        try {

            $q = Doctrine_Query::create()
                    ->from('StdInputCategory')
                    ->where("$searchMode = ?", $searchValue);

            $stdCategory = $q->execute();

            return $stdCategory;

        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }


    }

    /**
     * View STD input category
     */
    public function viewStdInputCategory() {

        try {

            $q = Doctrine_Query::create()
                    ->from('StdInputCategory c')
                    ->where('c.input_category_code = ?', $this->getInputCategoryCode());

            $stdCategory = $q->fetchArray();

            return $stdCategory;

        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }
    }

    /**
     * Save STD input category object
     */
    public function saveStdInputCategory() {

        try {

            $this->save();

        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }

    }

    /**
     * Delete STD input category
     * @param $categoryList
     * @return unknown_type
     */
    public function deleteStdInputCategory($categoryList) {

        try {

            if (is_array($categoryList)) {

                $q = Doctrine_Query::create()
                        ->delete('StdInputCategory')
                        ->whereIn('input_category_code', $categoryList );

                $numDeleted = $q->execute();
            }
        } catch (Exception $e) {

            throw new Exception($e->getMessage());
        }
    }

    /**
     * Get an object of STD input category
     * @return $user
     */
    public function getStdInputCategoryObject() {

        try {

            $stdCategory = Doctrine::getTable('StdInputCategory')
                    ->find($this->getInputCategoryCode());

            return $stdCategory;

        } catch (Exception $e) {

            throw new Exception($e->getMessage());
        }
    }

    /**
     * Get all STD categorises
     * @return array of categorises
     */
    public function getAllStdInputCategories() {

        try {

            $q = Doctrine_Query::create()
                    ->from('StdInputCategory ')
                    ->orderBy('name ASC');

            $stdCategories = $q->fetchArray();

            return  $stdCategories ;

        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }

    }

    /**
     * Check STD input category
     * @return boolean
     */
    public function isStdInputCategoryExist($categoryCode, $categoryName) {

        try {

            $q = Doctrine_Query::create()
                    ->from('StdInputCategory')
                    ->where('name = ?', $categoryName);

            $stdCategory = $q->fetchArray();

            if (is_array($stdCategory) && !empty($stdCategory)) {

                if ($stdCategory) {

                    if ($stdCategory[0]['input_category_code'] == $categoryCode) {
                        return false;
                    }
                }

                return true;
            }

            return false;


        } catch (Exception $e) {

            throw new Exception($e->getMessage());

        }
    }
}
